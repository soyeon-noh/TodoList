{"version":3,"sources":["logo.svg","context/AppContextProvider.jsx","context/UserContextProvider.jsx","comps/Todo/TodoInput.jsx","comps/Todo/TodoItem.jsx","comps/Todo/TodoList.jsx","comps/Todo/TodoMain.jsx","modules/fetchModules.jsx","comps/LoginForm.jsx","comps/LoginRoute.jsx","comps/AuthRoute.jsx","comps/Buttons/CompButton.jsx","comps/Buttons/MyButton.jsx","comps/Buttons/GoogleButton.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","useTodoContext","useContext","AppContextProvider","children","useState","t_id","t_text","t_comp","todo","setTodo","todoList","setTodoList","nextId","useRef","inputId","todoInsert","e","alert","current","focus","todoClear","propsStore","onChange","target","value","onClick","onkeyPress","key","onClickDelete","window","confirm","Number","dataset","todoId","_todoList","filter","console","table","onCompClick","index","findIndex","selecteTodo","Provider","UserContext","useUserContext","UserContextProvider","propsData","user","setUser","TodoInput","onKeyPress","className","ref","TodoItem","data-todo-id","TodoList","list_view","map","item","TodoMain","header","form","fetchLogin","userid","password","a","fetchOption","body","JSON","stringify","fetch","response","ok","json","resultUser","method","headers","credentials","LoginForm","account","setAccount","idID","pwID","history","useHistory","name","onLogin","replace","placeholder","type","backgroundColor","LoginRoute","AuthRoute","fetchCallback","useCallback","gapi","auth2","init","client_id","scope","getAuthInstance","currentUser","get","googleUser","getBasicProfile","profile","getId","email","getEmail","getName","image","getImageUrl","Token","getAuthResponse","id_token","useEffect","CompButton","style","color","border","MyButton","GoogleButton","buttonRef","googleResponse","result","login_source","load","isSignedIn","log","attachClickHandler","err","id","disconnect","App","src","logo","alt","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2872622e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useContext, useRef, useState } from \"react\";\r\n\r\n/**\r\n * React Context API 기능을 활용하여\r\n * state를 관리하는 도구\r\n *\r\n * 다중 구조의 컴포넌트가 겹쳐있는 경우\r\n * state 를 전파하는 것이 매우 불편한 코드로 작성될 수 있다.\r\n *\r\n * 이럴때 Context API를 활용하여\r\n * state와 공용으로 사용할 여러가지 함수를 Store에 보관하고\r\n * 필요한 곳에서만 useContext()를 사용하여 쉽게 getter할 수 있도록\r\n * 도와주는 컴포넌트\r\n *\r\n * Context를 생성하기\r\n * 생성된 Context에 state 등을 보관하고\r\n * useContext() Hook을 커스터마이징하여 손쉽게 사용할 수 있도록 한다.\r\n *\r\n * Context를 사용할 컴포넌트들을\r\n * 합성 패턴을 이용하여 관리할 수 있도록 한다.\r\n */\r\n\r\n// 컨텍스트 생성\r\nconst AppContext = createContext();\r\n\r\n// 컨텍스트의 Store에 보관된 정보들을 추출하기 위한 Hook 함수를 선언\r\nexport const useTodoContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\n// export const useTodoContext = () => {\r\n//   return useContext(AppContext);\r\n// };\r\n\r\n// Provider를 합성패턴으로 선언하여\r\n// 필요한 곳에서 끌어올려 사용할 수 있도록 한다.\r\nfunction AppContextProvider({ children }) {\r\n  // TODO 정보 1개를 보관할 state\r\n  const [todo, setTodo] = useState({\r\n    t_id: 0,\r\n    t_text: \"\",\r\n    t_comp: false,\r\n  });\r\n\r\n  const [todoList, setTodoList] = useState([]);\r\n\r\n  // Refferrence 변수 선언하기\r\n  const nextId = useRef(0); // 정수형변수\r\n  const inputId = useRef(); // tag를 selete 하는 용도로 사용가능\r\n\r\n  const onChange = (e) => {\r\n    const t_text = e.target.value;\r\n    // ES6 이후에는 객체에 값을 담을때\r\n    // 객체의 키 이름과 같은 변수에 담긴 값을 담을 때는\r\n    // 키 이름 한번만 사용해도 된다.\r\n    // ex ) {t_text : t_text } 는 { t_text } 처럼 사용가능\r\n    //   setTodo({ ...todo, t_text: t_text });\r\n    setTodo({ ...todo, t_text, t_id: nextId.current });\r\n  };\r\n\r\n  // 리스트에 추가하기\r\n  const todoInsert = (e) => {\r\n    if (todo.t_text === \"\") {\r\n      alert(\"할 일을 입력하세요\");\r\n      inputId.current.focus();\r\n      return;\r\n    }\r\n    setTodoList([...todoList, todo]);\r\n    nextId.current++;\r\n\r\n    todoClear();\r\n  };\r\n\r\n  // 입력창 clear\r\n  const todoClear = () => {\r\n    setTodo({ t_id: nextId.current, t_text: \"\", t_comp: false });\r\n  };\r\n\r\n  // 입력된 todo를 todoList에 추가하기\r\n  const onClick = (e) => todoInsert(e);\r\n\r\n  // 입력박스에서 Enter Key가 눌러지면\r\n  const onkeyPress = (e) => {\r\n    // e.keyCode === 13 // Enter키\r\n    if (e.key === \"Enter\") {\r\n      todoInsert(e);\r\n      // ESC키 (작동안됨;)\r\n    } else if (e.key === \"Escape\") {\r\n      // } else if (e.keyCode === 27) {\r\n      todoClear();\r\n    }\r\n  };\r\n\r\n  const onClickDelete = (e) => {\r\n    if (window.confirm(\"삭제할까요?\")) {\r\n      // TodoItem.jsx에서 data-todo-id 라고 저장하면\r\n      // 앞에 data-는 dataset으로 변경\r\n      // todo-id는 todoId와 같이 lower Camel case로 변경된다.\r\n      /** 문자열로 들어오기때문에 숫자형으로 형변환 */\r\n      const t_id = Number(e.target.dataset.todoId);\r\n\r\n      // 배열 요소중에서 t_id 가 일치하는 요소를 삭제하기\r\n      // 원래 배열요소를 filtering 하는데\r\n      // t_id 값이 dataset의 todoId 와 일치하지 않는 것만\r\n      // 새로운 배열로 만들어라.\r\n      const _todoList = todoList.filter((todo) => todo.t_id !== t_id);\r\n      console.table(_todoList);\r\n      setTodoList(_todoList);\r\n      alert(\"삭제됨\" + t_id);\r\n    }\r\n  };\r\n\r\n  const onCompClick = (e) => {\r\n    const t_id = Number(e.target.dataset.todoId);\r\n\r\n    // 배열 요소중에 조건에 맞는 값이 있으면\r\n    // 그 값이 몇번째 요소인지 index를 return 한다.\r\n\r\n    const index = todoList.findIndex((todo) => todo.t_id === t_id);\r\n    // 찾았으면\r\n\r\n    // 해당 요소만 따로 추출하여 selectTodo에 담기\r\n    const selecteTodo = todoList[index];\r\n\r\n    const _todoList = [...todoList];\r\n    _todoList[index] = {\r\n      // index에 해당하는 값만 변화시키는 것\r\n      ...selecteTodo,\r\n      t_comp: !selecteTodo.t_comp,\r\n    };\r\n    setTodoList(_todoList);\r\n  };\r\n\r\n  const propsStore = {\r\n    todo,\r\n    todoList,\r\n    onChange,\r\n    onClick,\r\n    onkeyPress,\r\n    inputId,\r\n    onClickDelete,\r\n    onCompClick,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={propsStore}>{children}</AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AppContextProvider;\r\n","import React, { createContext, useContext, userState, useState } from \"react\";\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nconst UserContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState();\r\n\r\n  const propsData = { user, setUser };\r\n\r\n  return (\r\n    <UserContext.Provider value={propsData}>{children}</UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContextProvider;\r\n","import \"../../css/TodoInput.css\";\r\nimport { useTodoContext } from \"../../context\";\r\n\r\nfunction TodoInput() {\r\n  const { todo, onChange, onClick, onKeyPress, inputId } = useTodoContext();\r\n  return (\r\n    <div className=\"form\">\r\n      <input\r\n        value={todo.t_text}\r\n        ref={inputId}\r\n        onChange={onChange}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <div className=\"btn_insert\" onClick={onClick}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoInput;\r\n","import React from \"react\";\r\nimport \"../../css/TodoItem.css\";\r\nimport { useTodoContext } from \"../../context\";\r\n\r\nfunction TodoItem({ todo }) {\r\n  const { onClickDelete, onCompClick } = useTodoContext();\r\n  const { t_id, t_text, t_comp } = todo;\r\n  return (\r\n    <div className=\"todo_item\">\r\n      <div className=\"todo_delete\" onClick={onClickDelete} data-todo-id={t_id}>\r\n        &times;\r\n      </div>\r\n      <div className=\"todo_id\">{t_id}</div>\r\n      <div\r\n        className={`todo_text ${t_comp && \"checked\"}`}\r\n        onClick={onCompClick}\r\n        data-todo-id={t_id}\r\n      >\r\n        {t_text}\r\n      </div>\r\n      {/* 선택정 랜더링\r\n\t  현재 todo의 t_comp 값이 true 일때만 \r\n\t  이 tag가 나타나도록 하라\r\n\t   */}\r\n      {t_comp && <div className=\"check_mark\">&#x2713;</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import { useTodoContext } from \"../../context\";\r\nimport \"../../css/TodoList.css\";\r\nimport { TodoItem } from \"../index\";\r\n\r\nfunction TodoList() {\r\n  const { todoList } = useTodoContext();\r\n  const list_view = todoList.map((item) => {\r\n    return <TodoItem todo={item} key={item.t_id} />;\r\n  });\r\n  return <div>{list_view}</div>;\r\n}\r\n\r\nexport default TodoList;\r\n","import { AppContextProvider } from \"../../context\";\r\nimport \"../../css/TodoMain.css\";\r\n\r\nfunction TodoMain({ header, form, children }) {\r\n  return (\r\n    <AppContextProvider>\r\n      <main className=\"todo_main_layout\">\r\n        <div className=\"title\">{header}</div>\r\n        <section className=\"form_wrapper\">{form}</section>\r\n        <section className=\"list_wrapper\">{children}</section>\r\n      </main>\r\n    </AppContextProvider>\r\n  );\r\n}\r\n\r\nexport default TodoMain;\r\n","const fetchLogin = async (userid, password) => {\r\n  // 이미 선언된 fetchOption에 body 속성을 추가하기\r\n  fetchOption.body = JSON.stringify({ userid, password });\r\n\r\n  const response = await fetch(\r\n    \"http://localhost:8080/users/login\",\r\n    fetchOption\r\n  );\r\n\r\n  if (response.ok) {\r\n    const resultUser = await response.json();\r\n    return resultUser;\r\n  } else {\r\n    alert(\"Login Fail\");\r\n    return [];\r\n  }\r\n};\r\n\r\nconst fetchOption = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n  },\r\n  credentials: \"include\",\r\n};\r\n\r\nconst fetchUser = async () => {\r\n  const response = await fetch(\"http://localhost:8080/users\", fetchOption);\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else return [];\r\n};\r\n\r\nexport { fetchLogin, fetchUser };\r\n","import React, { useRef, useState } from \"react\";\r\nimport \"../css/LoginForm.css\";\r\nimport { useUserContext } from \"../context\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchLogin } from \"../modules/fetchModules\";\r\nimport { CompButton } from \"./index\";\r\nimport { GoogleButton } from \".\";\r\n\r\nconst LoginForm = () => {\r\n  const { setUser } = useUserContext();\r\n\r\n  const [account, setAccount] = useState({\r\n    userid: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const idID = useRef();\r\n  const pwID = useRef();\r\n\r\n  const history = useHistory();\r\n\r\n  const onChange = (e) => {\r\n    setAccount({ ...account, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onLogin = async () => {\r\n    const { userid, password } = account;\r\n    const resultUser = await fetchLogin(userid, password);\r\n    await setUser(resultUser);\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"login_form\">\r\n      <input\r\n        name=\"userid\"\r\n        ref={idID}\r\n        placeholder=\"아이디를 입력해주세요\"\r\n        onChange={onChange}\r\n      />\r\n      <input\r\n        name=\"password\"\r\n        ref={pwID}\r\n        type=\"password\"\r\n        placeholder=\"비밀번호를 입력해주세요\"\r\n        onChange={onChange}\r\n      />\r\n      <CompButton backgroundColor=\"#03c75a\" onClick={onLogin}>\r\n        로그인\r\n      </CompButton>\r\n      <GoogleButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst LoginRoute = ({ children }) => {\r\n  return <BrowserRouter>{children}</BrowserRouter>;\r\n};\r\n\r\nexport default LoginRoute;\r\n","import { useUserContext } from \"../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useCallback } from \"react\";\r\n\r\nconst AuthRoute = ({ children }) => {\r\n  const { user, setUser } = useUserContext();\r\n  const history = useHistory();\r\n\r\n  const fetchCallback = useCallback(async () => {\r\n    // 초기화코드\r\n    await window.gapi.auth2.init({\r\n      client_id:\r\n        \"819100873334-r3gjkehge2tsd5ka36ps16d20dflgfkc.apps.googleusercontent.com\",\r\n      scope: \"profile email\",\r\n    });\r\n\r\n    if (!window.gapi) {\r\n      alert(\"google API Not Found!!!\");\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    // gapi(google API)로부터 auth2 객체를 조회하기\r\n    const auth2 = await window?.gapi?.auth2.getAuthInstance();\r\n    if (!auth2) {\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    // 로그인되어있는 사용자 정보 getter하기\r\n    const googleUser = await auth2.currentUser.get();\r\n    const profile = await googleUser.getBasicProfile();\r\n\r\n    // 로그인이 안 된경우 profile없음\r\n    if (!profile) {\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    const user = {\r\n      userid: profile.getId(),\r\n      email: profile.getEmail(),\r\n      name: profile.getName(),\r\n      image: profile.getImageUrl(),\r\n      Token: googleUser.getAuthResponse().id_token,\r\n    };\r\n    setUser(user);\r\n  }, [history, setUser]);\r\n\r\n  useEffect(fetchCallback, [fetchCallback]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\r\n\r\nfunction CompButton({ children, onClick }) {\r\n  const btnStyle = {\r\n    backgroundColor: \"#61dafb\",\r\n    color: \"white\",\r\n    border: \"1px solid #61dafb\",\r\n  };\r\n  return (\r\n    <button style={btnStyle} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CompButton;\r\n","import React from \"react\";\r\n\r\nfunction MyButton({ text }) {\r\n  const btnStyle = {\r\n    backgroundColor: \"blue\",\r\n    color: \"white\",\r\n  };\r\n  return <button style={btnStyle}>{text}</button>;\r\n}\r\n\r\nexport default MyButton;\r\n","import { useEffect, useRef } from \"react\";\r\nimport \"../../css/GoogleButton.css\";\r\nimport { useUserContext } from \"../../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst GoogleButton = () => {\r\n  const buttonRef = useRef();\r\n  const { setUser } = useUserContext();\r\n  const history = useHistory();\r\n\r\n  const googleResponse = (result) => {\r\n    const profile = result.getBasicProfile();\r\n    const email = profile.getEmail();\r\n    const id = profile.getId();\r\n    const name = profile.getName();\r\n    const image = profile.getImageUrl();\r\n\r\n    const Token = result.getAuthResponse().id_token;\r\n\r\n    setUser({\r\n      userid: email,\r\n      login_source: \"GOOGLE\",\r\n    });\r\n\r\n    alert(email + \" 님 반갑습니다\");\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  /**\r\n   * public/index.html 파일에 아래 script를 import 한다\r\n   * src=\"https://apis.google.com/js/api:client.js\"\r\n   */\r\n  const googleSDK_init = () => {\r\n    if (!window.gapi) {\r\n      alert(\"Google API NOT Found\");\r\n      return;\r\n    }\r\n\r\n    // google API 가 활cd성화되고\r\n    // 활성화된 API 중에서 auth2가 loading(사용할 준비가 되면)\r\n    // 다음 코드를 자동으로 실행해라.\r\n    // gapi : google cloud service를 JS에서 사용하기 위한 객체 도구\r\n    // gapi의 load() 함수를 사용하여 auth2 객체를 초기화하기\r\n    // 이때 google로부터 부여받은 client_id를 입력해준다.\r\n    window.gapi.load(\"auth2\", async () => {\r\n      // init를 초기화 시켜준다\r\n      // load() 함수에 의해서 auth2 객체가 초기화 된다.\r\n      // auth2 객체\r\n      // : google cloud service를 사용한 oAuth2 인증 시스템에 접근 할 수 있는 객체\r\n      // google로 로그인을 구현하기 위한 초기화 절차\r\n      const auth2 = await window.gapi.auth2.init({\r\n        client_id:\r\n          \"819100873334-r3gjkehge2tsd5ka36ps16d20dflgfkc.apps.googleusercontent.com\",\r\n        scope: \"profile email\",\r\n      });\r\n\r\n      if (auth2?.isSignedIn.get()) {\r\n        console.log(\"로그인이 이미 된 상태\");\r\n        // 원하는 곳으로 redirect\r\n      }\r\n\r\n      // - 정상적으로 로그인이되면 뒤의 함수를 실행한다.\r\n      // - 버튼을 클릭했을 때\r\n      // \tgoogle 로그인 창이 뜨도록 하는 click event 핸들러 설정.\r\n      // - buttonRef가 ref로 설정된 컴포넌트(button 등)에 클릭이벤트를 설정하고\r\n      // \t해당되는 컴포넌트를 클릭하면 google 로그인 창이 뜨도록 설정하기\r\n      // - google login 창이 popup 되고, id를 선택하여\r\n      // \t정상적인 로그인이 수행되면\r\n      //\t로그인 이후 작동되는 callback 함수를 3번째 매개변수로 설정한다.\r\n      // - google login 창이 popup 된 후 그냥 창을 닫거나\r\n      // \t정상적으로 로그인이 수행되지 않았을 떄  실행되는 함수를\r\n      // \t4번째 매개변수로 설정한다.\r\n      // 1번째 매개변수 : 누구를 클릭했을 때\r\n      // 2번째 매개변수 : 옵션\r\n      // 3번째 매개변수 : 로그인이 성공했을 때 실행할 함수\r\n      // 4번째 매개변수 : 로그인이 실패했을 때 실행할 함수\r\n      await auth2.attachClickHandler(\r\n        buttonRef.current,\r\n        {},\r\n        googleResponse,\r\n        (err) => alert(JSON.stringify(err))\r\n      );\r\n    });\r\n  };\r\n\r\n  // 버튼이 만들어지면서 이 함수가 실행된다.\r\n  useEffect(googleSDK_init, []);\r\n\r\n  // 로그아웃 임시코드\r\n  // getAuthInstance()는 단독으로쓰면 오류가 발생하는데\r\n  // 이미 로그인이 성공한 (init) 경우에만 실행되므로 단독작성\r\n  const logout = () => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance();\r\n    auth2?.disconnect();\r\n    alert(\"Logout OK!\");\r\n  };\r\n\r\n  // id는\r\n  // react 코드를 작성할 때는 사용할 수 없음\r\n  // css를 작성할 때는 사용할 수 있음\r\n  return (\r\n    <div id=\"buttonWrapper\">\r\n      <div id=\"myGoogleBtn\" ref={buttonRef}>\r\n        <span className=\"icon\"></span>\r\n        <span className=\"buttonText\">Google 로그인</span>\r\n      </div>\r\n      <span className=\"buttonText\" onClick={logout}>\r\n        Google 로그아웃\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n// 현재 로그아웃을 누르면 자동으로 myGoogleBtn 도 눌러지는 버블링이 발생\r\n// 핸들링이 안 된다.\r\n\r\nexport default GoogleButton;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TodoMain, TodoInput, TodoList } from \"./comps\";\nimport { MyButton, HomeButton, CompButton } from \"./comps\";\nimport { LoginForm, LoginRoute, AuthRoute } from \"./comps\";\nimport { Route } from \"react-router-dom\";\nimport { UserContextProvider } from \"./context\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* TodoMain.jsx Layout을 사용하여 TODO 화면을 구현 */}\n        <UserContextProvider>\n          <LoginRoute>\n            <Route exact path=\"/login\">\n              <LoginForm />\n            </Route>\n            <Route exact path=\"/\">\n              <AuthRoute>\n                <TodoMain header=\"TODO LIST\" form={<TodoInput />}>\n                  <TodoList />\n                </TodoMain>\n              </AuthRoute>\n            </Route>\n          </LoginRoute>\n        </UserContextProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}